[gd_scene load_steps=44 format=3 uid="uid://ckmuw1sdthrj0"]

[ext_resource type="Script" path="res://scenes/world/overworld.gd" id="1_lo3pv"]
[ext_resource type="PackedScene" uid="uid://1gfropwtqfbn" path="res://GodotSky/GodotSky.tscn" id="2_4r2jq"]
[ext_resource type="PackedScene" uid="uid://dauj0oyj1t0b2" path="res://scenes/world/player/Player.tscn" id="2_xuyks"]
[ext_resource type="Script" path="res://GodotSky/Presets/sky_presets.gd" id="3_73v0x"]
[ext_resource type="Texture2D" uid="uid://crb03io8hby0c" path="res://resources/textures/kenney_prototype_textures/orange/texture_01.png" id="5_rkibg"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_t8syx"]
albedo_texture = ExtResource("5_rkibg")
uv1_scale = Vector3(0.25, 0.25, 0.25)
uv1_triplanar = true
uv1_triplanar_sharpness = 5.02394
texture_filter = 4

[sub_resource type="PlaneMesh" id="PlaneMesh_ho5qc"]
material = SubResource("StandardMaterial3D_t8syx")
size = Vector2(100, 100)

[sub_resource type="Shader" id="Shader_8uyh7"]
code = "shader_type sky;
render_mode use_half_res_pass, use_quarter_res_pass;

uniform vec4 baseColor : source_color = vec4(0.052192,0.101373,0.192708,1.0);
uniform sampler2D scatteringLUT;
uniform vec3 scatterColor : source_color = vec3(1.0);
uniform vec3 scatterColor2 : source_color = vec3(1.0);

// Bools
uniform bool bAnimClouds = true;
//uniform bool bStaticClouds = true; *DEPRECATED*
uniform bool bAnimStars = true;
uniform int cloudType = 0;

// Sun
uniform float sunRadius;
uniform float sunEdgeBlur;
uniform vec3 sunDiscColor : source_color;
uniform vec4 sunGlowColor : source_color;
uniform vec3 sunlightColor;
uniform float sunGlowIntensity;

// Moon
uniform float moonRadius;
uniform float moonEdgeBlur;
uniform vec4 moonGlowColor : source_color;
uniform vec3 moonLightColor;
uniform float moonGlowIntensity;

// 2D Clouds
uniform vec3 baseCloudColor : source_color = vec3(1.0);
uniform float cloudDensity : hint_range(5.0, 10.0, 0.05) = 7.0;
uniform float cloudEdge : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform float cloudCoverage : hint_range(-1.0,1.0,0.01) = 0.0;
uniform vec2 cloudDirection = vec2(1.0,1.0);
uniform sampler2D cloudTexture;
uniform sampler2D cloudTexture2;
uniform sampler2D cloudNoise;
uniform sampler2D weatherMap;
uniform float mgSize : hint_range(0.5, 0.99, 0.01) = 0.92;
uniform float cloudAlpha : hint_range(0.0, 1.0, 0.1) = 1.0;
uniform float cloudSpeed = 0.001;
uniform float absorption : hint_range(0.0, 5.0, 0.1) = 5.0;
uniform float henyeyGreensteinLevel : hint_range(0.5, 0.75, 0.01) = 0.69;
uniform float dynamicCloudBrightness : hint_range(0.5, 1.0, 0.01) = 0.9;
uniform float horizonUVCurve : hint_range(0.5, 1.0, 0.01);

// Horizon
uniform vec4 horizonFogColor : source_color;
uniform float horizonAlpha : hint_range(0.0, 1.0, 0.1) = 1.0;
uniform float horizonSize : hint_range(1.0, 7.0, 0.1);

// Stars
uniform sampler2D starTexture;
uniform sampler2D starNoise;
uniform vec3 starColor : source_color;
uniform float starBrightness : hint_range(0.0, 0.5, 0.01) = 0.2;
uniform float twinkleSpeed : hint_range(0.0, 0.05, 0.001) = 0.025;
uniform float twinkleScale : hint_range(0.5, 5.0, 0.1) = 4.0;
uniform float starResolution : hint_range(-1.0, 3.0, 1.0) = 2.0;
uniform float starSpeed = 0.002;

const vec3 camPos = vec3(0.0,1.0,0.0); 

float remap(float v, float minOld, float maxOld, float minNew, float maxNew) {
    return minNew + (v-minOld) * (maxNew - minNew) / (maxOld-minOld);
}

// Phase function
float henyey_greenstein(float cos_theta, float g) {
	const float k = 0.0795774715459;
	return k * (1.0 - g * g) / (pow(1.0 + g * g - 2.0 * g * cos_theta, 1.5));
}

// Create sun and moon discs based on the directional lights
vec3 createSunMoonDisc(vec3 dir, vec3 sunDir, vec3 color, float r, float edgeBlur) {
	float disc = 0.0;
	float discSizeCheck = (1.0 - (r * 2.0));
	if (dot(dir,sunDir) > discSizeCheck) {
		disc = pow((dot(dir,sunDir) - discSizeCheck) * edgeBlur,5.0);
	}
	vec3 discColored;
	discColored = clamp(vec3(disc) * color,0.0,1.0);
	return discColored;
}

vec3 createSunGlow(vec3 dir, vec3 sunDir, float r) {
	float sunGlow = 0.0;
	float glowSize = (1.0 - ((0.0003 * 800.0) * 2.0));
	if (dot(dir,sunDir) > glowSize) {
		sunGlow = mix(0.0,(dot(dir,sunDir) - glowSize * 1.05) * (1.0 - dir.y),sunGlowIntensity);
	}
	vec3 sunGlowFinal = clamp((pow(sunGlow - 0.1,1.0) * sunGlowColor.rgb),0.0,1.0) * sunGlowColor.a;
	return sunGlowFinal;
}

vec3 createMoonGlow(vec3 dir, vec3 moonDir, float r) {
	float moonGlow = 0.0;
	float glowSize = (1.0 - ((0.0003 * 400.0) * 2.0));
	if (dot(dir,moonDir) > glowSize) {
		moonGlow = mix(0.0,(dot(dir,moonDir) - glowSize),moonGlowIntensity);
	}
	vec3 moonGlowFinal = pow(vec3(moonGlow),vec3(3.0)) * moonGlowColor.rgb * moonGlowColor.a;
	return moonGlowFinal;
}

float createHorizonFog(vec3 vertexColor) {
	float clampedVertexColor = 0.0;
	if (vertexColor.y < 0.0) {
		clampedVertexColor = 1.0;
	}
	else { 
		clampedVertexColor = vertexColor.y;
	}
	float fogAlpha = clamp(pow((1.0 - clampedVertexColor),horizonSize) - (1.0 - horizonAlpha),0.0,1.0) * horizonFogColor.a ;
	return fogAlpha;
}

// Setup base light scattering with day and night
vec3 scatterLight(vec3 vertexColor, vec2 skyUV) {

	// Clamp lower hemisphere vertex normal Y (creates solid lower hemisphere color)
	float clampedVertexColor = 0.0;
	if (vertexColor.y < 0.0) { clampedVertexColor = 0.0001; }
	else { clampedVertexColor = vertexColor.y; }
	
	float vertexSlope = pow((1.0 - vertexColor.y),2.0);
	
	// Calculate SUN X and Y position on scattering LUT texture UV
	// Sun
	float UVx = mix(vertexSlope,1.0,0.5);
	float UVy = clamp(LIGHT0_DIRECTION.y / -2.0,-0.495,0.495) + 0.5;
	
	// Moon
	float UVx2 = mix(vertexSlope,1.0,0.1);
	float UVy2 = clamp(LIGHT1_DIRECTION.y / 2.0,-0.495,0.495) + 0.5;
	
	// Sample scattering LUT lexture and apply scattercolor adjustment
	vec3 sunLightScattered = texture(scatteringLUT,vec2(UVx,UVy)).rgb * scatterColor;
	vec3 moonLightScattered = texture(scatteringLUT,vec2(UVx2,UVy2)).rgb * scatterColor2 + 0.15;
	vec3 lightScattered = sunLightScattered + moonLightScattered;
	lightScattered = lightScattered * baseColor.rgb;
	
	vec3 baseSkyColor = lightScattered;
	
	float a1 = 0.0;
	if (bAnimStars == true) {
		a1 = (TIME * starSpeed);
	}
	else {
		a1 = 0.0;
	}
	vec3 starMap = textureLod(starTexture, vec2(skyUV.x + a1,skyUV.y), starResolution).rgb;
	vec3 starMap2 = textureLod(starTexture, vec2(skyUV.x + a1,skyUV.y), starResolution + 1.0).rgb;
	
	vec2 animUV = vec2(vertexColor.x,vertexColor.z) * twinkleScale + (TIME * twinkleSpeed);

	starMap = min(starMap,starMap2 * 0.3) + ((clamp(starMap - (starMap2 * 1.3),0.0,1.0)) * (texture(starNoise,animUV / 4.0).r * 10.0 ));
	
	baseSkyColor += starMap * starColor * starBrightness; // Add stars
	
	return baseSkyColor;
}

vec3 generateStaticClouds(vec3 dir, vec3 pos, vec2 skyUV, vec3 sunDir, vec3 moonDir) {
	vec4 xyMask = vec4(0.0);
	float zMask = 0.0;
	
	float sR = clamp(sunDir.x * -1.0,0.0,1.0);
	float sG = clamp(sunDir.x,0.0,1.0);
	float sB = clamp(sunDir.z,0.0,1.0);
	float sA = clamp(sunDir.z * -1.0,0.0,1.0);
	float sZ = clamp(sunDir.y * -1.0,0.0,1.0);
	
	float mR = clamp(moonDir.x * -1.0,0.0,1.0);
	float mG = clamp(moonDir.x,0.0,1.0);
	float mB = clamp(moonDir.z,0.0,1.0);
	float mA = clamp(moonDir.z * -1.0,0.0,1.0);
	float mZ = clamp(moonDir.y * -1.0,0.0,1.0);
	
	xyMask = mix(vec4(sR,sG,sB,sA), vec4(mR,mG,mB,mA), clamp(sunDir.y * 6.0,0.0,1.0)) * 0.7;
	zMask =  mix(sZ,mZ,clamp(sunDir.y * 6.0,0.0,1.0)) * 0.7;
	
	float a1 = 0.0;
	if (bAnimClouds == true) {
		a1 = (TIME * cloudSpeed);
	}
	else {
		a1 = 0.0;
	}
	
	float cloudsAlpha = textureLod(cloudTexture,vec2(skyUV.x + a1,skyUV.y), -1.0).r;
	float cloudAlpha2 = textureLod(cloudTexture,vec2(skyUV.x + a1,skyUV.y), -1.0).g * zMask;
	vec4 cloudShading = xyMask * textureLod(cloudTexture2,vec2(skyUV.x + a1,skyUV.y), -1.0);
	float cloudShading2 = (cloudShading.r + cloudShading.g) + (cloudShading.b + cloudShading.a);
	float cloudMainShadingMask = pow(cloudAlpha2 + cloudShading2,1.2);
	
	float cloudShine = ((1.0 - cloudsAlpha) + pow(cloudAlpha2 + cloudShading2,2.5)) * 17.0 * createSunGlow(dir,sunDir, 0.5).r;
	
	vec3 clouds = vec3(cloudMainShadingMask,cloudShine,cloudsAlpha);
	
	return clouds;
}

vec2 generate2DClouds(vec3 dir, vec3 sunDir, vec3 moonDir) {
	float cloudsFinal = 0.0;
	
	float horizonCurve = dir.y / horizonUVCurve;
	float clouds = texture(cloudNoise,vec2(dir.x / horizonCurve, dir.z / horizonCurve) / 5.0 + (TIME * 4.0 * cloudSpeed * cloudDirection)).r;
	float density = remap(cloudDensity,0.0,8.0,0.0,1.0);
	clouds *= textureLod(cloudNoise,vec2(dir.x / horizonCurve, dir.z / horizonCurve) / 10.0 + (TIME * 4.0 * cloudSpeed * cloudDirection),-2.0).r;
	clouds = clamp(mix(cloudCoverage,cloudCoverage + 1.0,clouds),cloudCoverage,1.0);
	clouds = clamp(pow(clouds,1.0 + cloudEdge),0.0,1.0);
	float weather = texture(weatherMap,vec2(dir.x / horizonCurve, dir.z / horizonCurve) / 20.0 + (TIME * 6.0 * cloudSpeed * cloudDirection)).r + 0.5;
	float cloudFade = clamp(dir.y,0.0,1.0);
	cloudsFinal = clamp(clouds - (clamp(weather + 0.5,0.0,1.0) * (1.0 - cloudCoverage / 2.0)),0.0,1.0);
	float cloudsFinal2 = cloudsFinal * mix(5.0,cloudDensity,dir.y) * (cloudFade * 2.0);
	float transmittance = exp(-cloudsFinal2);
	return vec2(transmittance,weather);
}

vec3 generateSky(vec3 dir, vec3 pos, vec2 skyUV, vec3 sunDir, float sunEnergy, vec3 sunColor, vec3 moonDir, vec3 moonColor, float moonEnergy) {
	vec3 skyColor = vec3(0.0);
	vec3 cloudColors = vec3(0.0);
	vec3 cloudMask = vec3(0.0);
	vec2 dynClouds = vec2(0.0);
	float dynCloudAlpha = 1.0 - dynClouds.x;
	
	float horizonCurve = dir.y / horizonUVCurve;
	
	float fogA = createHorizonFog(dir);
	vec3 atmos = scatterLight(dir,skyUV);
	
	if (cloudType == 0) {
		cloudMask = generateStaticClouds(dir,pos,skyUV,sunDir,moonDir);
	}
	
	if (cloudType == 1) {
		dynClouds = generate2DClouds(dir,sunDir,moonDir);
		dynCloudAlpha = 1.0 - dynClouds.x;
		cloudMask = clamp(vec3(dynCloudAlpha * 7.0),0.0,1.0);
	}
	
	skyColor += atmos;
	skyColor += createSunMoonDisc(dir,sunDir,sunColor,sunRadius,sunEdgeBlur) * (1.0 - cloudMask.z * cloudAlpha);
	skyColor += createSunMoonDisc(dir,moonDir,moonColor,moonRadius,moonEdgeBlur) * (1.0 - cloudMask.z * cloudAlpha);
	
	if (cloudType == 0) {
		float density = clamp((cloudDensity) / 5.0,0.0,1.0);
		vec3 cloudColor = mix(atmos * mix(dir.y,1.15,0.5),vec3(0.0),density);
		vec3 cloudLight = sunlightColor * 1.4 * cloudColor;
		vec3 cloudShading = pow((cloudLight + (cloudLight * cloudMask.y)) * cloudMask.x,vec3(1.2));
		vec3 cloudFinal = mix(cloudShading,baseCloudColor,0.1);
		
		cloudColors = baseCloudColor * cloudMask.z * cloudMask.x;
		if (dot(dir,sunDir) > mgSize) {
			float cloudGlow = remap(dot(dir,sunDir),mgSize,1.0,0.0,1.0);
			vec3 cloudGlow2 = mix(vec3(1.0),sunlightColor * 5.0,pow(cloudGlow, 3.0));
			float cloudGlow3 = 1.0 - cloudMask.z * 0.9 + cloudMask.x * 0.25;
			cloudColors = baseCloudColor * cloudGlow2 * cloudMask.z * cloudMask.x;
		}
		if (dot(dir,moonDir) > mgSize) {
			float cloudGlow = remap(dot(dir,moonDir),mgSize,1.0,0.0,1.0);
			vec3 cloudGlow2 = mix(vec3(1.0),vec3(1.0) * 10.0,pow(cloudGlow, 4.0));
			float cloudGlow3 = 1.0 - cloudMask.z * 0.9 + cloudMask.x * 0.25;
			cloudColors = baseCloudColor * cloudGlow2 * cloudMask.z * cloudMask.x;
		}
		
		skyColor *= clamp((1.0 - pow(cloudMask.z,3.0) * cloudAlpha),0.0,1.0) ;
		skyColor += (cloudFinal * (pow(cloudMask.z,3.0) * (1.0 - clamp((1.0 - 1.25) * 2.0,0.0,1.0))) + cloudColors) * cloudAlpha;
	}
	
	if (cloudType == 1) {
		float sun = dot(normalize(LIGHT0_DIRECTION), dir);
		float moon = dot(normalize(LIGHT1_DIRECTION), dir);
		skyColor = skyColor * dynClouds.x + (baseCloudColor * dynamicCloudBrightness * dynCloudAlpha);
		float hg = max(henyey_greenstein(sun,henyeyGreensteinLevel - 0.15),henyey_greenstein(moon,henyeyGreensteinLevel + 0.05));
		skyColor = skyColor + ((baseCloudColor * ((dynClouds.x) * hg * absorption)) * dynCloudAlpha);
		skyColor -= (clamp(texture(cloudNoise,vec2(dir.x / horizonCurve, dir.z / horizonCurve) / 5.0 + (TIME * 4.0 * cloudSpeed  * cloudDirection)).r - 0.5,0.0,1.0) *  baseCloudColor) * dynCloudAlpha;
	}
	
	skyColor = mix(skyColor,horizonFogColor.rgb * horizonFogColor.a,fogA) + createSunMoonDisc(dir,sunDir,sunColor,sunRadius,sunEdgeBlur) * (1.0 - cloudMask.z * cloudAlpha) + createSunMoonDisc(dir,moonDir,moonColor,moonRadius,moonEdgeBlur) * (1.0 - cloudMask.z * cloudAlpha);
	if (dir.y < 0.0) {
		skyColor = horizonFogColor.rgb;
	}
	skyColor += createSunGlow(dir,sunDir,sunRadius);
	skyColor += createMoonGlow(dir,moonDir,moonRadius);
	
	return skyColor;
}

void sky() {
	vec3 rayDirection = EYEDIR;
	
	vec3 background = horizonFogColor.rgb * horizonFogColor.a;
	
	if (rayDirection.y > 0.0) {
		background = generateSky(rayDirection, camPos, SKY_COORDS, LIGHT0_DIRECTION, LIGHT0_ENERGY, sunDiscColor, LIGHT1_DIRECTION, LIGHT1_COLOR, LIGHT1_ENERGY);
	}
	
	if (AT_QUARTER_RES_PASS && AT_CUBEMAP_PASS) {
		COLOR = background.rgb;
	} else if (AT_HALF_RES_PASS && !AT_CUBEMAP_PASS) {
		COLOR = background.rgb;
	} else if (AT_CUBEMAP_PASS) {
		COLOR = QUARTER_RES_COLOR.rgb;
	} else {
		COLOR = background.rgb;
	}
}"

[sub_resource type="Gradient" id="Gradient_2ate7"]
interpolation_mode = 2
offsets = PackedFloat32Array(0.125, 0.95)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_r735l"]
noise_type = 2
frequency = 0.021
fractal_octaves = 4
fractal_gain = 0.547
fractal_weighted_strength = 0.58
cellular_distance_function = 3
cellular_jitter = 0.7
cellular_return_type = 3
domain_warp_enabled = true
domain_warp_amplitude = 6.0
domain_warp_frequency = 1.0
domain_warp_fractal_octaves = 7
domain_warp_fractal_lacunarity = 5.0
domain_warp_fractal_gain = 2.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lv6e7"]
invert = true
seamless = true
seamless_blend_skirt = 0.401
color_ramp = SubResource("Gradient_2ate7")
noise = SubResource("FastNoiseLite_r735l")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_y1sdm"]
load_path = "res://.godot/imported/StaticCloudsAlpha.tga-aeae5bee38db78a43e09978978212fb6.bptc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_2022g"]
load_path = "res://.godot/imported/StaticCloudsXY.tga-45e8b412c7ba5c23145bc19f0379479a.bptc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_jlu4u"]
load_path = "res://.godot/imported/scatteringLUT.HDR-99e286dc918adeb86dcab7acbe638a84.bptc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_uoc6y"]
load_path = "res://.godot/imported/Stars_Noise.TGA-9ae9381bfcccf0fdce16904c45ee9062.s3tc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_7qfth"]
load_path = "res://.godot/imported/starmap_8k.jpg-b2d47d1d11eaf59ed584e6e010a27e2b.bptc.ctex"

[sub_resource type="Gradient" id="Gradient_qnuw0"]
interpolation_mode = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_4fesu"]
noise_type = 4
seed = 34
frequency = 0.042
fractal_octaves = 3
fractal_lacunarity = 1.605
fractal_gain = 2.397
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_dcyru"]
seamless = true
seamless_blend_skirt = 0.061
color_ramp = SubResource("Gradient_qnuw0")
noise = SubResource("FastNoiseLite_4fesu")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3eugf"]
shader = SubResource("Shader_8uyh7")
shader_parameter/baseColor = Color(0.0145395, 0.0244694, 0.0874464, 1)
shader_parameter/scatterColor = Color(1, 1, 1, 1)
shader_parameter/scatterColor2 = Color(1, 1, 1, 1)
shader_parameter/bAnimClouds = false
shader_parameter/bAnimStars = true
shader_parameter/cloudType = 1
shader_parameter/sunRadius = 0.0003
shader_parameter/sunEdgeBlur = 3600.0
shader_parameter/sunDiscColor = Color(0, 0, 0, 1)
shader_parameter/sunGlowColor = Color(0, 0, 0, 1)
shader_parameter/sunlightColor = null
shader_parameter/sunGlowIntensity = 0.45
shader_parameter/moonRadius = 0.0003
shader_parameter/moonEdgeBlur = 10000.0
shader_parameter/moonGlowColor = Color(0.544003, 0.651053, 1, 1)
shader_parameter/moonLightColor = null
shader_parameter/moonGlowIntensity = 0.8
shader_parameter/baseCloudColor = Color(0.0247954, 0.0349794, 0.104763, 1)
shader_parameter/cloudDensity = 4.25
shader_parameter/cloudEdge = 0.0
shader_parameter/cloudCoverage = 0.588
shader_parameter/cloudDirection = Vector2(1, 1)
shader_parameter/mgSize = 0.92
shader_parameter/cloudAlpha = 1.0
shader_parameter/cloudSpeed = 0.0003
shader_parameter/absorption = 5.0
shader_parameter/henyeyGreensteinLevel = 0.69
shader_parameter/dynamicCloudBrightness = 0.9
shader_parameter/horizonUVCurve = 0.5
shader_parameter/horizonFogColor = Color(0.0166131, 0.0263546, 0.101967, 1)
shader_parameter/horizonAlpha = 1.0
shader_parameter/horizonSize = 3.0
shader_parameter/starColor = Color(0.43, 0.55, 0.91, 1)
shader_parameter/starBrightness = 0.2
shader_parameter/twinkleSpeed = 0.025
shader_parameter/twinkleScale = 4.0
shader_parameter/starResolution = 1.0
shader_parameter/starSpeed = 0.002
shader_parameter/scatteringLUT = SubResource("CompressedTexture2D_jlu4u")
shader_parameter/cloudTexture = SubResource("CompressedTexture2D_y1sdm")
shader_parameter/cloudTexture2 = SubResource("CompressedTexture2D_2022g")
shader_parameter/cloudNoise = SubResource("NoiseTexture2D_lv6e7")
shader_parameter/weatherMap = SubResource("NoiseTexture2D_dcyru")
shader_parameter/starTexture = SubResource("CompressedTexture2D_7qfth")
shader_parameter/starNoise = SubResource("CompressedTexture2D_uoc6y")

[sub_resource type="Sky" id="Sky_prm4k"]
sky_material = SubResource("ShaderMaterial_3eugf")
process_mode = 3

[sub_resource type="Environment" id="Environment_0wv4t"]
background_mode = 2
sky = SubResource("Sky_prm4k")
sky_custom_fov = 132.7
ambient_light_source = 3
ambient_light_sky_contribution = 0.5
ambient_light_energy = 8.93
reflected_light_source = 2
sdfgi_enabled = true
sdfgi_use_occlusion = true
sdfgi_min_cell_size = 1.95313
fog_light_energy = 0.02
fog_density = 0.0046
volumetric_fog_enabled = true
volumetric_fog_density = 0.004224
volumetric_fog_temporal_reprojection_enabled = false

[sub_resource type="Gradient" id="Gradient_2omxj"]
offsets = PackedFloat32Array(0.419118, 0.553191, 0.601064, 0.691489)
colors = PackedColorArray(0.0601829, 0.0849014, 0.199897, 1, 0.381723, 0.127307, 0.10311, 1, 0.638549, 0.335553, 0.0995967, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_yvdpu"]
gradient = SubResource("Gradient_2omxj")

[sub_resource type="Gradient" id="Gradient_4mr5n"]
offsets = PackedFloat32Array(0.3125, 0.414239, 0.469256, 0.574468, 0.803191)
colors = PackedColorArray(0.0145395, 0.0244694, 0.0874464, 1, 0.0949225, 0.045259, 0.27951, 1, 0.334622, 0.303664, 0.453753, 1, 0.792964, 0.761777, 0.932676, 1, 0.204346, 0.344014, 0.5625, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_3bfjt"]
gradient = SubResource("Gradient_4mr5n")

[sub_resource type="Gradient" id="Gradient_qbpqp"]
offsets = PackedFloat32Array(0.174757, 0.475728, 0.660194, 0.824468, 1)
colors = PackedColorArray(0.0166131, 0.0263546, 0.101967, 1, 0.168694, 0.216311, 0.435438, 1, 0.916989, 0.704468, 0.478476, 1, 0.684128, 0.761883, 0.794691, 1, 0.828826, 0.919115, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_dtkfy"]
gradient = SubResource("Gradient_qbpqp")

[sub_resource type="Gradient" id="Gradient_2heeq"]
offsets = PackedFloat32Array(0.482759, 0.612069)
colors = PackedColorArray(0.544003, 0.651053, 1, 1, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_npel1"]
gradient = SubResource("Gradient_2heeq")

[sub_resource type="Gradient" id="Gradient_6hu87"]
offsets = PackedFloat32Array(0.161812, 0.521036, 0.612069)
colors = PackedColorArray(0.195465, 0.222085, 0.341751, 1, 0.471032, 0.514768, 0.697211, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_yoc8k"]
gradient = SubResource("Gradient_6hu87")

[sub_resource type="Curve" id="Curve_e5c8d"]
_data = [Vector2(0, 0.0423728), 0.0, 0.0, 0, 0, Vector2(0.477528, 0.0677966), 0.0, 0.0, 0, 0, Vector2(0.560886, 0), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 4

[sub_resource type="Gradient" id="Gradient_57ar7"]
offsets = PackedFloat32Array(0.345745, 0.62234)
colors = PackedColorArray(3.38419e-09, 0, 0.0381053, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_58qd2"]
gradient = SubResource("Gradient_57ar7")

[sub_resource type="Gradient" id="Gradient_tg0mw"]
offsets = PackedFloat32Array(0.366379, 0.49569, 0.901639)
colors = PackedColorArray(0, 0, 0, 1, 0.776471, 0.501961, 0.309804, 0.976471, 0.737255, 0.694118, 0.603922, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_5eeqo"]
gradient = SubResource("Gradient_tg0mw")
use_hdr = true

[sub_resource type="Gradient" id="Gradient_i47vq"]
offsets = PackedFloat32Array(0.443182, 0.566343, 0.660194)
colors = PackedColorArray(0, 0, 0, 1, 0.94902, 0.882353, 0, 1, 1, 0.955033, 0.827864, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_0hlja"]
gradient = SubResource("Gradient_i47vq")

[sub_resource type="Gradient" id="Gradient_rl3k5"]
offsets = PackedFloat32Array(0.02589, 0.365696, 0.462783, 0.543689, 0.993528)
colors = PackedColorArray(0, 0, 0, 1, 0, 0, 0, 1, 0.71298, 0.203695, 1.47464e-07, 1, 0.979906, 0.738618, 0.391285, 1, 0.996078, 0.996078, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_801kc"]
gradient = SubResource("Gradient_rl3k5")
use_hdr = true

[sub_resource type="Curve" id="Curve_3yr32"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.477012, 0), 0.0, 0.0, 0, 0, Vector2(0.58908, 1), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 4

[sub_resource type="Resource" id="Resource_m4esw"]
script = ExtResource("3_73v0x")
sunRadius = 0.0003
sunEdgeBlur = 3600.0
sunLightIntensity = SubResource("Curve_3yr32")
sunGlowIntensity = 0.45
moonRadius = 0.0003
moonEdgeBlur = 10000.0
moonLightIntensity = SubResource("Curve_e5c8d")
moonGlowIntensity = 0.8
horizonSize = 3.0
horizonAlpha = 1.0
cloudSpeed = 0.0003
cloudDirection = Vector2(1, 1)
cloudDensity = 4.25
cloudGlow = 0.92
cloudLightAbsorption = 5.0
cloudBrightness = 0.9
cloudUvCurvature = 0.5
cloudEdge = 0.0
anisotropy = 0.69
starColor = Color(0.43, 0.55, 0.91, 1)
starBrightness = 0.2
starResolution = 1.0
twinkleSpeed = 0.025
twinkleScale = 4.0
starSpeed = 0.002
baseSkyColor = SubResource("GradientTexture1D_3bfjt")
baseCloudColor = SubResource("GradientTexture1D_yvdpu")
overcastCloudColor = SubResource("GradientTexture1D_58qd2")
horizonFogColor = SubResource("GradientTexture1D_dtkfy")
sunLightColor = SubResource("GradientTexture1D_801kc")
sunDiscColor = SubResource("GradientTexture1D_5eeqo")
sunGlow = SubResource("GradientTexture1D_0hlja")
moonLightColor = SubResource("GradientTexture1D_yoc8k")
moonGlowColor = SubResource("GradientTexture1D_npel1")

[node name="Overworld" type="Node3D"]
script = ExtResource("1_lo3pv")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("PlaneMesh_ho5qc")

[node name="GodotSky" parent="." instance=ExtResource("2_4r2jq")]
environment = SubResource("Environment_0wv4t")
timeOfDay = 90.78
simulateTime = true
skyPreset = SubResource("Resource_m4esw")

[node name="TopdownPlayer3D" parent="." instance=ExtResource("2_xuyks")]
