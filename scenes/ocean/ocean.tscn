[gd_scene load_steps=2 format=3 uid="uid://byk6ut5151qmd"]

[sub_resource type="GDScript" id="GDScript_tcj0k"]
script/source = "@tool

extends Node3D

var OceanTile = preload(\"res://scenes/ocean/water_plane.tscn\");
var spawnPoint = preload(\"res://resources/grid_spawn_info/grid_spawn_info.tres\");

# Creates tile grid for infinite ocean
func createOceanTiles():
	for i in 17: # Loop through 17 tiles
		
		# Get loction, subdivision, and scale of each tile and create instance
		var spawnLocation = spawnPoint.spawnPoints[i];
		var tileSubdivision = spawnPoint.subdivision[i];
		var tileScale = spawnPoint.scale[i];
		var instance = OceanTile.instantiate();
		
		add_child(instance);
		
		# Set tile position, subdivision, and scale
		instance.position = Vector3(spawnLocation.x,0.0,spawnLocation.y) * 10.05; # Multiply by mesh width 10.5m
		instance.mesh.set_subdivide_width(tileSubdivision);
		instance.mesh.set_subdivide_depth(tileSubdivision);
		instance.set_scale(Vector3(tileScale, 1.0, tileScale)); # Ignore Y value because of planes

func _ready():
	Log.info(\"[World] Generating OceanTiles...\")
	createOceanTiles();

func _process(delta):
	RenderingServer.global_shader_parameter_set(\"ocean_pos\", self.position); # Update global shader parameter 'ocean_pos' to match the ocean node position
"

[node name="Ocean" type="Node3D"]
script = SubResource("GDScript_tcj0k")
